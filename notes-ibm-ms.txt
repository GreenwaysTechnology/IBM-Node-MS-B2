

Session :

1.ES 6


2.Node


3.Microservices

Javascript
..........

Lab setup:

1.cmd
2.vscode
3.node

/////////////////////////////////////////////////////////////////////////////////////////////

Project Setup:

javascriptapps>mkdir src


Javascript:
..........

What is javascript?

 javascript is pl.

C++ /java is Object oriented programming language.

 Object oriented programming  : it is way of writting.

Ways:
1.Procedural
2.OO
3.Functional Programming.
.........

Now a days many languages follows many ways in one language: hybrid paradigms(ways)

From java 8 , java is not only oo language but also functional style language.


javascript is hybrid pl
 ->Object based Programming
 ->Functional Style Programming
 ->Event driven Programming


Why javascript language was invented?

Brendan Eich is an American technologist and creator of the JavaScript programming language. 

Javascript pl invented at Netscap communication.

Javascript invented for web.

1989-1995 - static web

1996 - dynamic web : CGI,J2EE,ASP,PHP :server side
Netscap invented language at client side for making web dynamic :

Version history
1996 :  mocha 
1996  : action script
1997 :  javascript

The language submmited to committe : ECMA(European Computer Manufacturers Association)

1998 : THE FIrst javascript version : js 1.0 : ES 1.0
1999 : no release 
2000 : es 3.0
2005 : Ajax introduced
2007 : ES 4
2008 : ES 5
2012 : ES 6 proposal made
2015 : ES 6 Final draft
2016 : ES 7
..........................>

Javascript learning path:(ES 5 /ES6)
1.javascript language fundamentals
2.javascript and functions
3.javascript object based programming
4.javascript and networking : ajax
5.javascript browser programming : DOM Programming



1.javascript language fundamentals

->Variables and types,values(literals)
->operators
->loops


PL :  Strongly typed and weakly typed

 data
 type variable=10

java :Strongly typed
  int a =10
  a="hello"

weakly typed : type not verified during compile time
but vertifed during runtime

javascript : weakly typed /no type :

variable declaration

var | let | const | this variableName = value

value is called literal.

Note: based on literal only the type of variable is identified during runtime.

eg;
 var i =10;

here var is keyword
i is variable
10 is literal
 what is type of 10.

10 is number type


How to compile and execute javascript code?

 javascript runtime /engine : It is c /c++ program to compile and run js code.

Types of js engine:

1.Embeded js engine
    -Browser
2.standalone js engine
   -Node js : v8

google : chrome : v8
fire fox : spider monkey
ms : chakra
etc..

Types and variables

1.number
  size : 64 bit : aka double.

2.strings
 strings can be declared
  "" 
  ''
  `` - es 6
 size : each character is 16 bit unicode charater 

3.booleans ; true /false
  size : 1 bit


4.undefined: the variable has not been initalized
 var salary;  //= undefined;
 
 has no size

5.NaN : not  a number 

 1. it is unique no gengered by js engine in order to indicated numerical operations errors.

 2.Nan is toxic : you have to fix this.

When you get NaN?

 1. if you do compuation against undefined variable

 2. Type conversion
     ->String to number conversion.
       "10" - string ---10 number
      Types of conversion :
       1.implicit
          auto conversion
       2.explicit
          using apis : parseInt, parseFloat



6.Infinifty : div /0


other types:

7.function type
8.null
9.Object
////////////////////////////////////////////////////////////////////////////////////////////

let and const over view:

let and const is alternate for var keywords in es 6;

let and const vs var : to be discussed.

let vs const

Points:

1.let and const is used to declare variable :
  code best practice : if you are writing es 6 apps please follow let and const only.


const : 

 1.readonly

//variables and types

var i = 10;
console.log("I " + i);
var firstName ="Subramanian";
var lastName ='Murugan';
console.log("Full Name is " + firstName + " " + lastName);
console.log("Full Name is " , firstName , " " , lastName);
//back tick : use case 1: for simplifiying string concation
console.log(`Full Name ${firstName} ${lastName} `);

//back tick : use case 2: multi line string literal
var htmlDoc = "<html>" +
              "<body>" +
              "<h1>Hello</h1>" + 
              "</body>"+
               "</html>";
console.log(htmlDoc)

var htmlnewDoc =`
   <html>
   <body>
   <h1>Hello</h1>
   </body>
   </html>
`;
console.log(htmlnewDoc)

//booleans
var isWorking =true;
var hasProject =false;

console.log(`isWorking ${isWorking}`);
console.log(`Has Project ${hasProject}`)

//undefined
var salary;
console.log(`The salary is ${salary}`);

//undefined * 100 =NaN
var totalSalary = salary * 100;
console.log(`Total salary is ${totalSalary}`);

//type conversion
var stockValue = "100";
var qty =10;
//implicit conversion  : conversion first and then computation
var totalStock = stockValue * qty;
//explicit conversion : through api
var totalStockValue = parseFloat(stockValue) * qty;
console.log(`Total Stock Value ${totalStock}`)
console.log(`Total Stock Value ${totalStockValue}`)

//while conversion , $ is special character so that NaN 
var wage ="$10"
var totalWage = wage * 100
console.log(`Total Wage Value ${totalWage}`)

//infinity
var avgStock =  1000/ 0;
console.log(`Avg Stock ${avgStock}`)


const and let

//let 

let firstName ='Subramanian';
console.log(`The Name is ${firstName}`)

let a  =100;
console.log(`A value ${a}`);
//re intialization
a =900;
console.log(`A value ${a}`);
a =true
console.log(`A value ${a}`);
a ="hello"
console.log(`A value ${a}`);
const b =100;
console.log(` B value ${b}`);
b =87777;
///////////////////////////////////////////////////////////////////////////////////////////

Operators:

Comparsional operator

1.equal 
 ==
 ===
 !=
 !==

=== operator is recommended operator

== : only value comparsion
=== : value + type comparsion

//operators
//==
let a =100;
let b =100;
let result =  a==b;
console.log(`Equal result  ${result}`)

//this is bug in js language itself.
//the == compares the value portion not type portions
let x = "100" //type of x is string
let y = 100; //type of y is number

//VALE comparsion
let result1= x ==y;
//type + value comparsion : ===
let result2  = x === y;
console.log(` X AND Y result is ${result1}`)
console.log(` X AND Y result is ${result2}`)

//////////////////////////////////////////////////////////////////////////////////////////

or (||):  works based on truth table 


Decision making : if...else, if..else if,switch case, tenary operator ?:

if(boolean expression){

}else{

}

Advanced boolean concepts: Truthy and falsy values:
..................................................


in java only true and false are boolean expressions.

in java

boolean a =true;
if(a){}else{} : valid code.

int a =10;
if(a){}else{} : invalid code

in javascript:
let a =10; //number
if(a){
   console.log('A') 
}else{
    console.log('Not a')
}

let firstName = 'subramanian';
if(firstName){
    console.log('You have firstName')
}else{
    console.log('You have no first name')
}

Which is true and which is false?


 "In javascript every thing is true or truthy" but few values are false or falsy.


Falsy values:

1.boolean false
2.0
3.empty string "",''
4.NaN 
5.undefind
6.null


Tenary operator : for booleans to replace if condtions.


|| operator formula:

let  start;//undefined
let result = start || 100;
console.log(`The result is ${result}`)

if first operand(start) is true,then result would be first operand itself,else second operand



//or

let isWorking = true;
let hasProject = true;
//if
if(isWorking || hasProject){
  console.log('You are in the Company')
}else{
    console.log('You are out of company')
}
//boolean expression

let a =10; //number
if(a){
   console.log('A') 
}else{
    console.log('Not a')
}

let firstName = 'subramanian';
if(firstName){
    console.log('You have firstName')
}else{
    console.log('You have no first name')
}

let counter;
if(counter){
    console.log('counter')
}else{
    console.log('no counter')
}

counter ? console.log('counter-1 ') : console.log('no counter-1')
///////////////////////////////////////////////////////////////////////////////////////////
//operator

let  start;//undefined
let result = start || 100;
console.log(`The result is ${result}`)

let end;
end = end || 1000;
console.log(`The end is ${end}`)

let message="Hello";
let resultMessage =  message || "boom!";
console.log(resultMessage);


&& : operator is similar to or operator but opposit

///////////////////////////////////////////////////////////////////////////////////

! not and !!(invertor)
......................

! will make truthy and falsy values.



//or

let isWorking = true;
let hasProject = true;
//if
if(isWorking || hasProject){
  console.log('You are in the Company')
}else{
    console.log('You are out of company')
}
//boolean expression

let a =10; //number
if(a){
   console.log('A') 
}else{
    console.log('Not a')
}

let firstName = 'subramanian';
if(firstName){
    console.log('You have firstName')
}else{
    console.log('You have no first name')
}

let counter;
if(counter){
    console.log('counter')
}else{
    console.log('no counter')
}

counter ? console.log('counter-1 ') : console.log('no counter-1')
///////////////////////////////////////////////////////////////////////////////////////////
//operator

let  start;//undefined
let result = start || 100;
console.log(`The result is ${result}`)

let end;
end = end || 1000;
console.log(`The end is ${end}`)

let message="Hello";
let resultMessage =  message || "boom!";
console.log(resultMessage);


let shouldbeDone;
console.log(!shouldbeDone)

let done = false;
console.log(!done);
console.log(!!done)
//////////////////////////////////////////////////////////////////////////////////////

Other operators:

1.type of
2.new 
3.instance of
4.for..in
5. "."
6."[]"
7. "..."

typeof operator is used to know the runtime type of a
variable/value

according to type of operator:

number,nan,infinity : number type
string : string
boolean : boolean
undefined: undefined
null,object: object
function : function




//or

let isWorking = true;
let hasProject = true;
//if
if(isWorking || hasProject){
  console.log('You are in the Company')
}else{
    console.log('You are out of company')
}
//boolean expression

let a =10; //number
if(a){
   console.log('A') 
}else{
    console.log('Not a')
}

let firstName = 'subramanian';
if(firstName){
    console.log('You have firstName')
}else{
    console.log('You have no first name')
}

let counter;
if(counter){
    console.log('counter')
}else{
    console.log('no counter')
}

counter ? console.log('counter-1 ') : console.log('no counter-1')
///////////////////////////////////////////////////////////////////////////////////////////
//operator

let  start;//undefined
let result = start || 100;
console.log(`The result is ${result}`)

let end;
end = end || 1000;
console.log(`The end is ${end}`)

let message="Hello";
let resultMessage =  message || "boom!";
console.log(resultMessage);


let shouldbeDone;
console.log(!shouldbeDone)

let done = false;
console.log(!done);
console.log(!!done)

//type of 

let price =100;
let name ="subramanian"
let qty;
let totalPrice = price * qty;
console.log(`The type of price is ${typeof price}`)
console.log(`The type of name is ${typeof name}`)
console.log(`The type of totalPrice is ${typeof totalPrice}`)

///////////////////////////////////////////////////////////////////////////////////////////////

loops:

for,while,do..while :syntax same like c/c++ java

for..in : loop

iterators: each,find,filter.....

for(let i =0;i<10;i++){
    console.log(i)
}
///////////////////////////////////////////////////////////////////////////////////////////

Functions:

logical unit, having logic.

functions are literal in js(values)

function basics:
/funcition declaration
function sayHello(){
    console.log('Hello')
}
//function invocation.
sayHello();

in js function has properties:

return values
args/parameters


//funcition declaration
function sayHello() {
    console.log('Hello')
}
//function invocation.
sayHello();

//parameters and args
//a, and b is args
function add(a, b) {
    let c = a + b;
    console.log(`Add result is ${c}`)
}
//10,10 is parameters
add(10, 10);
//args without values
//solution : 1 es 5 style
/**function multiply(a, b) {
    let c = (a || 1) * (b || 1);
    console.log(`multiply result is ${c}`)
}**/

//es6 style :default args
function multiply(a = 1, b = 1) {
    let c = a * b;
    console.log(`multiply result is ${c}`)
}
multiply(10, 2)
multiply();//without parameters a,b are undefined
multiply(10);//single parameter

//i want function that should take more no of args , but i dont know how many parameters in
//pass in runtime
//variable args : var args : ES 5
/**function logger() {
    console.log(arguments)
}**/
//var args in es 6 : REST OPERATOR 
function logger(...logMessage) {
    console.log(logMessage)
}
logger('hello');
logger('hai', 'hello');
logger('hai', 'hello', 'welcome', 'test')

////////////////////////////////////////////////////////////////////////////////////

function getCounter(){
    return 10;
}
console.log(getCounter());

function substract(a=10,b=10){
  return a - b;
}
console.log(substract(100,10))
console.log(substract())

function login(userName='admin',password='admin'){
   if(userName === 'admin' && password === 'admin'){
       return true;
   }
   return  //false
}
login('guest','guest') ? console.log('login success') : console.log('login failed')

/////////////////////////////////////////////////////////////////////////////////////////////

Function literals : function as literal

Function declaration patterns:


1.function sayHello(){}
  sayHello();

2.function can be assigned to a variable.
  let a =10;

  let b = function as literal

let greeter = function() {
    
};

Formula:

 function can be assigned to a variable.
 once function is assigned to a variable, that variable can be
 used to invoke , pass, return that function: function pointers in c


Anonmous function: funciton without name.
function() {
    
};

function literals : params,args

//pattern 2: ES 5 Style

let greeter = function () {
    console.log('Greeter function');
};
//invoke
greeter();

let add = function (a = 10, b = 10) {
    return a + b;
};
console.log(add(10,10));



//function declarations

//pattern 1

//funcition declaration
function sayHello() {
    console.log('Hello')
}
//function invocation.
sayHello();

//pattern 2: ES 5 Style

let greeter = function () {
    console.log('Greeter function');
};
//invoke
greeter();

let add = function (a = 10, b = 10) {
    return a + b;
};
console.log(add(10,10));
............................................................................................
Arrow functions: lambda syntax:

 ES 6 version function literals.

1.Syntax sugar of existing function literal
2.the function binding: this

let greeter = () => {
    console.log('Greeter function');
};
//invoke
greeter();

//pattern 2: ES 6 Style : arrow function

let greeter = () => {
    console.log('Greeter function');
};
//invoke
greeter();

//arrow syntax features:

//1. if function has only one line of body: Remove {}
let welcome = () => console.log('Welcome function');
welcome();

//2. Parameters and args : multiple parameter with default value

let add = (a = 1, b = 1) => {
    let c = a + b;
    console.log(`Add ${c}`);
};
add();

//3.parameters and args : single parameter without default value : remove ()
let getStock = value => console.log(value);
getStock(100);
//4: return values: if function more line of body

let calcualte = (a=1,b=1)=>{
    let c = a * b;
    return c;
};
console.log(calcualte(10,10));
//5. single arg, no default value, and return the same, no body : remove return statment

let getStatus = loggedIn => loggedIn;

console.log(getStatus(true))

/////////////////////////////////////////////////////////////////////////////////////////

What can be passed as parameter to function?

function myfun(arg){

}

myfun(1) //number
myfun("hello"//string
myfun(true) //boolean
myfun()//undefined

You can pass any literal as a parameter including function.


How to pass function as a parameter?



//funcition
//a =x ,b=y
function add(a, b) {
    return a + b;
}
//values
add(10, 10); //passing values directly
let x = 10;
let y = 20;
add(x, y); // passing values via variables

//caller =welcome = function(){}
function sayGreeter(caller) {
    caller();
}

let welcome = function () {
    console.log('Welcome to javascript!');
};
//passing function via variable
sayGreeter(welcome);

//passing function directly
sayGreeter(function () {
    console.log('Greetings!')
});
///////////////////////////////////////////////////////////////////////////////////////

//Arrow version

const greetMe = caller => caller();

let hai = () => console.log('Welcome to javascript:Arrow Version');
greetMe(hai);

//passing function directly
greetMe(()=>console.log('function arrow Version'))




//caller =welcome = function(){}
function sayGreeter(caller) {
    let result = caller('Hello');
    console.log(result);
}

let welcome = function (message='foo') {
    //console.log(message);
    return message;
};
//passing function via variable
sayGreeter(welcome);

//passing function directly
sayGreeter(function (message='bar') {
    //console.log(message)
    return message;
});
//////////////////////////////////////////////////////////////////////////////////////

const print = caller=>{
    caller('Error Message')
};

let warning = (message='Warning Message')=>console.log(message);
print(warning);

print((message='Warning Message')=>console.log(message))
///////////////////////////////////////////////////////////////////////////////////////////

How to return function from other functions?
............................................


function increment() {

    // let inner= function(){
    //     console.log('inside increment')
    // };
    // return inner;
    return function (message) {
        console.log(`Inside increment ${message}`)
    }
}

let myfunc = increment() // =>function
myfunc('Hello');

//short cut
increment()('Hai')

// let decrement = () => {
//     return message => console.log(`Inside decrement ${message}`)
// }
let decrement = () => message => console.log(`Inside decrement ${message}`)
decrement()('Hello')

///////////////////////////////////////////////////////////////////////////////////////////
3.javascript object based programming

What is Object oriented Programming and Principles:
..................................................
 
OO Principles:

1.Abstraction
2.Encapsulation
3.Typing
     ->Polymorphism
4.Modularity
    ->packages
5.Hierachy
   -is-a : inheritance
   -has-a
-------------------
6.Concurrency

7.Persistency

if any pl follows first principle, those languages are called object oriented pl.

if any language does not implement 5 principles fully, or partially implements those
languages are called as "Object Based Programming language"

//////////////////////////////////////////////////////////////////////////////////////////

What is Object?

  Memory, having state and behaviour.

How do you create object?

In classical object oriented pl, class is fundamental unit to create object.

In javascript by default no classes : class free object based language, in es 6 , who 
added class syntax.

In javascript how to create objects?

Patterns:

1.constructor pattern
  ->functions
  ->es 6 class
2.literal pattern
  -no class,no function.

Object charactertics:

1.state : data: instance variables
2.indentity  : data :	 instance variable
3.behaviour : methods

how to declare instance variables and methods?

 ->this keyword


function as object template:

Coding standards:

1.if function is going to hold logic then function name should be
  verb or verbNoun
  add() , calculateInterest()

2.if function is going to hold object data, function name should be
  Noun
  Employee,Customer,Invoice,Order,Product....


//Object template : class
function Employee() {
    //instance variables
    this.id = 1;
    this.firstName = 'Subramanian'
    this.lastName = 'Murugan'
    //instance methods
    this.calculateSalary = function () {
        return 1000;
    };
}

//object creation
let emp = new Employee();
//access object properties:variables and methods
console.log(`Id ${emp.id}`);
console.log(`Name ${emp.firstName} ${emp.lastName}`);
console.log(`Salary ${emp.calculateSalary()}`);

here emp : it is just variable we call as reference variable
let is keyword
new is keyword to create object
Employee() -> function call with respect to Object : constructor call.


ES 6 classes:

/Syntax Sugar for function object template : class
class Customer {
    //instance variables
    id = 1;
    firstName = 'Subramanian'
    lastName = 'Murugan'
    //methods
    calculateInvoice() {
        return 1000
    }
    calculateGST = () => 1000;
}
let cust = new Customer();
//access object properties:variables and methods
console.log(`Id ${cust.id}`);
console.log(`Name ${cust.firstName} ${cust.lastName}`);
console.log(`Invoice ${cust.calculateInvoice()} ${cust.calculateGST()}`)


Literal pattern:

let product = {
    id: 1,
    name: 'Iphone',
    price: 10000,
    qty: 100,
    //methods
    calculateQty: function () {
        return 10 * 90;
    },
    calculateGST() {
        return 10;
    },
    calculateStock : () => 1000
};

console.log(`Product info`)
console.log(`Id ${product.id}`);
console.log(`name ${product.name}`);
console.log(`price ${product.price}`);
console.log(`qty ${product.qty}`);
console.log(`Stock ${product.calculateStock()}`);

///////////////////////////////////////////////////////////////////////////////////////////

How to initalize state?

state can be initalized in three ways

1.direct /hardcoded way
2.after object creation
3.during object creation.



1.direct /hardcoded way

function Employee() {
    //instance variables
    this.id = 1;
    this.firstName = 'Subramanian'
    this.lastName = 'Murugan'
 }
class Customer {
    //instance variables
    id = 1;
    firstName = 'Subramanian'
    lastName = 'Murugan'
}

let product = {
    id: 1,
    name: 'Iphone',
    price: 10000,
    qty: 100,
};


2.after object creation
//Object template : class :es 5
function Employee() {
    //instance variables
    this.id = 1;
    this.firstName = 'Subramanian'
    this.lastName = 'Murugan'
    //instance methods
    this.calculateSalary = function () {
        return 1000;
    };
}

//object creation
let emp = new Employee();
//initalize the object properties after object creation

emp.id =100;
emp.firstName = 'Srisha'
emp.lastName = 'Subramanian';


//access object properties:variables and methods
console.log(`Id ${emp.id}`);
console.log(`Name ${emp.firstName} ${emp.lastName}`);
console.log(`Salary ${emp.calculateSalary()}`);

class Customer {
    //instance variables
    id = 1;
    firstName = 'Subramanian'
    lastName = 'Murugan'
    //methods
    calculateInvoice() {
        return 1000
    }
    calculateGST = () => 1000;
}
let cust = new Customer();

//initalize the object properties after object creation
cust.id =9999;
cust.firstName ='Ram';
//access object properties:variables and methods
console.log(`Id ${cust.id}`);
console.log(`Name ${cust.firstName} ${cust.lastName}`);
console.log(`Invoice ${cust.calculateInvoice()} ${cust.calculateGST()}`)

let product = {
    id: 1,
    name: 'Iphone',
    price: 10000,
    qty: 100,
    //methods
    calculateQty: function () {
        return 10 * 90;
    },
    calculateGST() {
        return 10;
    },
    calculateStock : () => 1000
};

console.log(`Product info`)
product.id =99999;
product.name ='Lenvo Think Pad',
product.qty =90;


console.log(`Id ${product.id}`);
console.log(`name ${product.name}`);
console.log(`price ${product.price}`);
console.log(`qty ${product.qty}`);
console.log(`Stock ${product.calculateStock()}`);

3.during object creation : constructor over loading

//Object template : class :es 5
function Employee(id = 1, firstName = 'Subramanian', lastName = 'Murugan') {
    //instance variables
    this.id = id;
    this.firstName = firstName
    this.lastName = lastName
    //instance methods
    this.calculateSalary = function () {
        return 1000;
    };
}

//object creation

let emp = new Employee(1, 'Subramanian', 'Murugan');

//access object properties:variables and methods
console.log(`Id ${emp.id}`);
console.log(`Name ${emp.firstName} ${emp.lastName}`);
console.log(`Salary ${emp.calculateSalary()}`);

class Customer {
    //instance variables
    constructor(id = 1, firstName = 'Subramanian', lastName = 'Murugan') {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName
    }

    //methods
    calculateInvoice() {
        return 1000
    }
    calculateGST = () => 1000;
}
let cust = new Customer(1, 'Subramanian', 'Murugan');
//access object properties:variables and methods
console.log(`Id ${cust.id}`);
console.log(`Name ${cust.firstName} ${cust.lastName}`);
console.log(`Invoice ${cust.calculateInvoice()} ${cust.calculateGST()}`)

////////////////////////////////////////////////////////////////////////////////////////////

Hierachy: Object Relation ship

1.is-a 
2.has-a 

IS-A : Inheritance

inheritance in es 5 , so complex: proto types:
 https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance

is-a in es 6 : looks like java.

inheritance objective : code sharing in parent and child relationship.


super keyword


class Account {
    constructor(accountId) {
        console.log('Account class')
        this.accountId = accountId;
    }
    withdraw(){
        console.log('withdraw in account')
    }
}
class SavingsAccount extends Account {
    constructor(accountId) {
        super(accountId)
        console.log('SavingsAccount class')
    }
    //Redefining: not overriding
    withdraw(){
        super.withdraw()
        console.log('withdraw in SavingsAccount')
    }
}

//object creation
let account = new SavingsAccount(233);
console.log(account.accountId)
account.withdraw();

//////////////////////////////////////////////////////////////////////////////////////////

HAS-A : Dependency Injection:
..............................

done through only constructor.


//using functions
/**function Product(pid = 'P001', name = 'Iphone') {
    this.pid = pid;
    this.name = name;
}
function Order(orderId = 'A001', product = new Product()) {
    this.orderId = orderId;
    //HAS-A
    this.product = product;
}**/
//using classes
class Product {
    constructor(pid = 'P001', name = 'Iphone') {
        this.pid = pid;
        this.name = name;
    }
}
class Order {
    constructor(orderId = 'A001', product = new Product()) {
        this.orderId = orderId;
        //HAS-A
        this.product = product;
    }
}
//create object with dependencies

let product = new Product();
let order = null;

order = new Order();
console.log(`OrderId ${order.orderId} ${order.product.pid} ${order.product.name}`)

order = new Order('B002', product);
console.log(`OrderId ${order.orderId} ${order.product.pid} ${order.product.name}`)

order = new Order('B002', new Product('P8880', 'Lenvo Think Pad'));
console.log(`OrderId ${order.orderId} ${order.product.pid} ${order.product.name}`)



//has-a with literal objects: nested object

let locationInfo = {
    country: {
        countryName: 'INdia',
        state: {
            stname: 'Tamil Name',
            district: {
                name: 'Coimbatore'
            }
        }
    }
}
console.log(locationInfo.country.state.district.name)

////////////////////////////////////////////////////////////////////////////////////////////

Object internal structure:

ASYNC programming
scope chain











